{"version":3,"sources":["helpers/api.ts","components/Comment.tsx","components/CommentList.tsx","components/User.tsx","components/Post.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["getAllData","url","fetch","then","response","json","getPosts","a","Promise","all","postsFromServer","usersFromServer","commentsFromServer","map","post","user","find","id","userId","comments","filter","comment","postId","Comment","className","name","body","href","email","CommentList","key","User","address","street","suite","city","zipcode","Post","title","PostList","posts","useState","query","setQuery","filterQuery","setFilterQuery","visiblePosts","useMemo","pattern","RegExp","test","setFilterQueryWithDebounce","useCallback","debounce","htmlFor","type","placeholder","value","onChange","event","target","App","setPosts","isLoading","setIsLoading","errorMessage","setErrorMessage","preparedPosts","length","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e18e8bb2.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst getAllData = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n};\n\nexport const posts = () => getAllData<PostType>('/posts.json');\n\nexport const users = () => getAllData<UserType>('/users.json');\n\nexport const comments = () => getAllData<CommentType>('/comments.json');\n\nexport const getPosts = async (): Promise<PostType[]> => {\n  const [\n    postsFromServer,\n    usersFromServer,\n    commentsFromServer,\n  ] = await Promise.all([posts(), users(), comments()]);\n\n  return postsFromServer.map((post) => ({\n    ...post,\n    user: usersFromServer.find((user) => user.id === post.userId) as UserType,\n    comments: commentsFromServer.filter((comment) => comment.postId === post.id),\n  }));\n};\n","import React from 'react';\n\ntype Props = {\n  comment: CommentType;\n};\n\nexport const Comment: React.FC<Props> = ({ comment }) => (\n  <li className=\"comment__item comment\">\n    <h5 className=\"comment__name\">{comment.name}</h5>\n    <p className=\"comment__body\">{comment.body}</p>\n    <p>\n      <a href={`mailto:${comment.email}`} className=\"comment__email\">\n        {comment.email}\n      </a>\n    </p>\n  </li>\n);\n","import React from 'react';\nimport { Comment } from './Comment';\n\ntype Props = {\n  comments: CommentType[];\n};\n\nexport const CommentList: React.FC<Props> = ({ comments }) => (\n  <>\n    <ul className=\"comments\">\n      {comments.map(comment => (\n        <Comment\n          key={comment.id}\n          comment={comment}\n        />\n      ))}\n    </ul>\n  </>\n);\n","import React from 'react';\n\ntype Props = {\n  user: UserType;\n};\n\nexport const User: React.FC<Props> = ({ user }) => (\n  <div className=\"author\">\n    <div className=\"author__info\">\n      <p className=\"author__name\">{user.name}</p>\n      <p>\n        <a href={`mailto:${user.email}`} className=\"author__email\">\n          {user.email}\n        </a>\n      </p>\n    </div>\n\n    <div className=\"author_address\">\n      <p>\n        <b>Street:</b>\n        {' '}\n        <i>{user.address.street}</i>\n      </p>\n      <p>\n        <b>Suite:</b>\n        {' '}\n        <i>{user.address.suite}</i>\n      </p>\n      <p>\n        <b>City:</b>\n        {' '}\n        <i>{user.address.city}</i>\n      </p>\n      <p>\n        <b>Zipcode:</b>\n        {' '}\n        <i>{user.address.zipcode}</i>\n      </p>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { CommentList } from './CommentList';\nimport { User } from './User';\n\n\ntype Props = {\n  post: PostType;\n};\n\nexport const Post: React.FC<Props> = ({ post }) => (\n  <li className=\"post__item\">\n    <div className=\"post__article\">\n      <h3 className=\"post__title\">\n        {post.title}\n      </h3>\n      <p className=\"post_text\">\n        {post.body}\n      </p>\n    </div>\n    <User user={post.user} />\n    <hr />\n    <h3>Comments:</h3>\n    <CommentList comments={post.comments} />\n  </li>\n);\n","import React, { useCallback, useState, useMemo } from 'react';\nimport debounce from 'lodash/debounce';\nimport { Post } from './Post';\n\n\ninterface Props {\n  posts: PostType[];\n}\n\nexport const PostList: React.FC<Props> = ({ posts }) => {\n  const [query, setQuery] = useState<string>('');\n  const [filterQuery, setFilterQuery] = useState<string>('');\n\n  const visiblePosts = useMemo(() => {\n    const pattern = new RegExp(filterQuery, 'i');\n\n    return posts\n      .filter(({ body, title }) => pattern.test(body + title));\n  }, [posts, filterQuery]);\n\n  const setFilterQueryWithDebounce = useCallback(\n    debounce(setFilterQuery, 500),\n    [],\n  );\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n    setFilterQueryWithDebounce(value);\n  };\n\n  return (\n    <>\n      <div className=\"wrapper\">\n        <h3 className=\"search-title\">Search for posts:</h3>\n        <label htmlFor=\"search\">\n          <input\n            id=\"search\"\n            type=\"text\"\n            className=\"validate\"\n            placeholder=\"Type something to search post...\"\n            value={query}\n            onChange={handleChange}\n          />\n        </label>\n      </div>\n      <ul className=\"post post__list\">\n        {visiblePosts.map(post => (\n          <Post key={post.id} post={post} />\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { getPosts } from './helpers/api';\nimport { PostList } from './components/PostList';\n\nconst App = () => {\n  const [posts, setPosts] = useState<PostType[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  async function handleLoadClick() {\n    setIsLoading(true);\n\n    try {\n      const preparedPosts = await getPosts();\n\n      setPosts(preparedPosts);\n    } catch (error) {\n      setErrorMessage('Loading error, please try again later');\n    }\n\n    setIsLoading(false);\n  }\n\n  return (\n    <div className=\"app__header\">\n      <h1 className=\"heading\">Dynamic list of posts</h1>\n      {!posts.length\n        ? (\n          <>\n            <button\n              type=\"button\"\n              className=\"loading__btn\"\n              onClick={handleLoadClick}\n              disabled={isLoading}\n            >\n              {isLoading ? 'Loading...' : 'Load'}\n            </button>\n            {errorMessage && <span className=\"error\">{errorMessage}</span>}\n          </>\n        )\n        : (\n          <PostList posts={posts} />\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}